services:
  invoice:
    build:
      context: ./pharmacy_invoice
      dockerfile: Dockerfile
    image: docker-invoice:latest
    container_name: invoice
    ports:
      - "8080:8080"
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: admin
    depends_on:
      - rabbitmq
    restart: on-failure
    networks:
      - backend

  order:
    build:
      context: ./pha-orders
      dockerfile: Dockerfile
    image: docker-order:latest
    container_name: order
    ports:
      - "8081:8080"
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: admin
    depends_on:
      - rabbitmq
    restart: on-failure
    networks:
      - backend

  stock:
    build:
      context: ./pha-stock
      dockerfile: Dockerfile
    image: docker-stock:latest
    container_name: stock
    ports:
      - "8082:8080"
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: admin
    depends_on:
      - rabbitmq
    restart: on-failure
    networks:
      - backend

  payment:
    build:
      context: ./pha-payment
      dockerfile: Dockerfile
    image: docker-payment:latest
    container_name: payment
    ports:
      - "8084:8080"
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: admin
    depends_on:
      - rabbitmq
    restart: on-failure
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./definitions.json:/etc/rabbitmq/definitions.json:ro
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

volumes:
  rabbitmq_data:

networks:
  backend:
    driver: bridge
